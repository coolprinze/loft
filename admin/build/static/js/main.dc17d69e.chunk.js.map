{"version":3,"sources":["config.ts","actions/types.ts","actions/errorHandler.ts","actions/AuthActions.ts","constants/immigrantsConstants.ts","helpers/index.ts","actions/ImmigrantActions.ts","components/Form/TextValidator.tsx","components/Form/index.tsx","components/Loading/index.tsx","assets/img/bg1.jpg","assets/img/logo.png","assets/img/Avatar-1.png","components/Section/index.tsx","pages/Antigua.tsx","pages/Business.tsx","pages/General.tsx","pages/Stkitts.tsx","routes.ts","actions/Utilites.ts","layouts/AdminLayout.tsx","pages/Auth.tsx","reducers/AuthReducers.ts","reducers/index.ts","reducers/ImmigrantReducers.ts","store.ts","App.tsx","serviceWorker.js","index.tsx"],"names":["URL","header","headers","Accept","AUTH_SUCCESS","LOGOUT_USER","errHandler","err","callback","Array","isArray","forEach","error","Object","keys","message","auth","localStorage","removeItem","type","key","setUser","data","dispatch","a","payload","IMMIGRANT_LIST_REQUEST","IMMIGRANT_LIST_SUCCESS","IMMIGRANT_LIST_FAILED","IMMIGRANT_DELETE_REQUEST","IMMIGRANT_DELETE_SUCCESS","IMMIGRANT_DELETE_FAILED","IMMIGRANT_LIST_RESET","BUSINESS_LIST_REQUEST","BUSINESS_LIST_SUCCESS","BUSINESS_LIST_FAILED","GENERAL_LIST_REQUEST","GENERAL_LIST_SUCCESS","GENERAL_LIST_FAILED","UPDATE_IMMIGRANT_REQUEST","UPDATE_GENERAL_SUCCESS","UPDATE_BUSINESS_SUCCESS","UPDATE_IMMIGRANT_FAILED","format","require","logout","removeLocal","window","location","reload","handleErr","response","getLocal","name","parse","getItem","JSON","setLocal","content","setItem","stringify","_calculateAge","birthday","ageDifMs","Date","getTime","ageDate","Math","abs","getUTCFullYear","formatNum","num","currency","showDecimals","currencyPosition","spacing","fundsAction","funds","sort","b","min","map","fund","max","value","id","dateDiffsToReadable","date1","date2","moment","years","diff","add","months","qualToString","_qs","qs","index","from","to","degree","school","city","country","title","length","experienceToString","_es","es","employer","occupation","laguageToString","_ls","ls","level","language","getImmigrants","collection","getState","token","config","Authorization","Axios","get","res","toast","updateImmigrant","patch","searchDb","query","param","entries","toString","TextValidator","state","isValid","valid","invalid","feedBack","changeState","setState","FormFeedback","style","display","this","props","isRequired","isEmail","isPhoneNumber","isPassword","rest","Input","onKeyUp","required","errorText","otherConditions","validator","isMobilePhone","replaceAll","isLength","isEmpty","Component","TextInputGroup","makeAnimated","iconClass","label","className","htmlFor","subText","DateInputGroup","onChange","e","FormGroup","InputGroup","InputGroupAddon","addonType","InputGroupText","target","_d","closeOnSelect","timeFormat","inputProps","SelectGroup","placeholder","options","onSelect","disabled","defaultValue","labelClass","CustomInput","item","selected","Loading","show","Section","bgImage","bgImageSrc","styles","children","width","backgroundImage","console","log","titles","Antigua","search","loading","onSearch","then","catch","immigrantList","Row","Col","sm","first_name","last_name","email","phone","married","old_dependents","young_dependents","teen_dependents","average_dependents","rejected","deported","contact_medium","referee","createdAt","investRange","networthRange","residenceCountry","nationalityCountry","RejectedCountries","DeportedCountries","invest","networth","filename","Card","Table","responsive","striped","bordered","immigrant","scope","thousandSeparator","prefix","displayType","connect","field","Business","_q","invest_funds","startDate","endDate","sortConfig","asc","isClients","enableKeyboard","document","onkeypress","disableKeyboard","sortData","sortField","direction","businessList","_a","_b","toLowerCase","client_status","match","params","investRanges","xs","group","dob","eligible_party","spouse","managerial_experience","citizenshipCountry","qualifications","birthCountry","bsSize","border","class","onFocus","onBlur","autoComplete","onClick","Button","color","size","connectProps","getBusinessImmigrants","withRouter","General","generalList","work_histories","language_proficiencies","criminal_record","family_in_canada","job_offer","medical_condition","comment","getGeneralImmigrants","Stkitts","routes","path","process","component","getCountries","getFundRanges","AdminLayout","showMenu","countries","isOpen","initFunc","res1","res3","toggleMenu","toggleMenuChildren","menu","getRoutes","prop","user","showcaseBg","src","logo","alt","height","md","classList","contains","avatar1","Collapse","activeClassName","block","logOut","initialState","password","prevPath","Auth","loginUser","preventDefault","authenticateUser","isAuthenticated","Container","maxHeight","Form","onSubmit","bind","lg","autoFocus","callBack","post","authReducer","action","authLoaded","goBack","combineReducers","immigrantDelete","success","filter","imi","middleware","thunk","store","createStore","reducers","composeWithDevTools","applyMiddleware","App","autoClose","draggable","enableMultiContainer","containerId","position","Boolean","hostname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.dc17d69e.chunk.js","sourcesContent":["// export const URL = 'http://localhost:5000',\nexport const URL = 'https://api-v2.loftimmigration.com',\n  baseColor = '#365B76 ',\n  header: {\n    headers: {\n      'Content-Type': string\n      Accept: string\n      Authorization?: string\n    }\n  } = {\n    headers: {\n      'Content-Type': 'application/json',\n      Accept: 'application/json',\n    },\n  },\n  secret = 'secret'\n","export const AUTH_SUCCESS = 'AUTH_SUCCESS',\n  LOGOUT_USER = 'LOGOUT_USER'\n","import { Dispatch } from 'redux';\r\nimport { LOGOUT_USER } from './types';\r\n\r\nconst dispatchAction = (action: { type: string; payload?: string }) => (\r\n  dispatch: Dispatch\r\n) => dispatch(action);\r\n\r\nexport const errHandler = (err: any, callback: (e: string) => void) => {\r\n  if (Array.isArray(err)) {\r\n    err.forEach(error => callback(error[Object.keys(error)[0]]));\r\n  } else if (typeof err === 'object') {\r\n    if (err.message) {\r\n      callback(err.message);\r\n    } else if (err.error && err.auth) {\r\n      localStorage.removeItem('token');\r\n      localStorage.removeItem('user');\r\n      callback(err.error);\r\n      dispatchAction({ type: LOGOUT_USER });\r\n    } else {\r\n      let keys = Object.keys(err);\r\n      keys.forEach(key => {\r\n        callback(err[key]);\r\n      });\r\n    }\r\n  } else if (typeof err === 'string') {\r\n    callback(err);\r\n  }\r\n};\r\n","import Axios from 'axios'\r\nimport { toast } from 'react-toastify'\r\nimport { header, URL } from '../config'\r\nimport { errHandler } from './errorHandler'\r\nimport { LOGOUT_USER, AUTH_SUCCESS } from './types'\r\nimport { Dispatch } from 'redux'\r\nimport userType from '../interface/user'\r\n\r\nexport const authenticateUser = (\r\n  user: { identifier: string; password: string },\r\n  callBack: any = () => {}\r\n) => async (dispatch: Dispatch) => {\r\n  await Axios.post(`${URL}/users/login`, user, header)\r\n    .then(async (res) => {\r\n      callBack(true, false)\r\n      await setUser(res.data)(dispatch)\r\n      toast('Login Successful')\r\n    })\r\n    .catch((err) => {\r\n      callBack(false, { loading: false })\r\n      errHandler('Invalid Credentials', toast)\r\n    })\r\n}\r\n\r\nexport const setUser = (data: { token: string; user: userType }) => async (\r\n  dispatch: Dispatch\r\n) => {\r\n  dispatch({\r\n    type: AUTH_SUCCESS,\r\n    payload: data,\r\n  })\r\n}\r\n\r\nexport const resetPassword = async (data: any, callBack = (res: any) => {}) => {\r\n  header.headers.Authorization = `Bearer ${data.token}`\r\n  await Axios.patch(`${URL}/users/reset-password`, data, header)\r\n    .then((res) => {\r\n      callBack(true)\r\n      toast('Password reset successful, proceed to login')\r\n    })\r\n    .catch((err) => {\r\n      callBack(false)\r\n      errHandler(err.response.data, toast)\r\n    })\r\n}\r\n\r\nexport const forgotPassword = async (\r\n  email: string,\r\n  callBack = (res: any) => {}\r\n) =>\r\n  await Axios.post(`${URL}/users/forgot-password`, { email }, header)\r\n    .then(async (res) => {\r\n      toast('A link to reset your password have been sent to your email')\r\n\r\n      callBack(true)\r\n    })\r\n    .catch((err) => {\r\n      callBack(false)\r\n      errHandler(err.response.data, toast)\r\n    })\r\n\r\nexport const logOut = () => (dispatch: Dispatch) => {\r\n  localStorage.removeItem('user')\r\n  localStorage.removeItem('token')\r\n  header.headers.Authorization = ''\r\n\r\n  toast('Successfully logged out')\r\n  dispatch({\r\n    type: LOGOUT_USER,\r\n  })\r\n}\r\n","export const IMMIGRANT_LIST_REQUEST = 'IMMIGRANT_LIST_REQUEST',\n  IMMIGRANT_LIST_SUCCESS = 'IMMIGRANT_LIST_SUCCESS',\n  IMMIGRANT_LIST_FAILED = 'IMMIGRANT_LIST_FAILED'\n\nexport const IMMIGRANT_DELETE_REQUEST = 'IMMIGRANT_DELETE_REQUEST',\n  IMMIGRANT_DELETE_SUCCESS = 'IMMIGRANT_DELETE_SUCCESS',\n  IMMIGRANT_DELETE_FAILED = 'IMMIGRANT_DELETE_FAILED',\n  IMMIGRANT_LIST_RESET = 'IMMIGRANT_LIST_RESET'\n\nexport const BUSINESS_LIST_REQUEST = 'BUSINESS_LIST_REQUEST',\n  BUSINESS_LIST_SUCCESS = 'BUSINESS_LIST_SUCCESS',\n  BUSINESS_LIST_FAILED = 'BUSINESS_LIST_FAILED'\n\nexport const GENERAL_LIST_REQUEST = 'GENERAL_LIST_REQUEST',\n  GENERAL_LIST_SUCCESS = 'GENERAL_LIST_SUCCESS',\n  GENERAL_LIST_FAILED = 'GENERAL_LIST_FAILED'\n\nexport const UPDATE_IMMIGRANT_REQUEST = 'UPDATE_IMMIGRANT_REQUEST',\n  UPDATE_GENERAL_SUCCESS = 'UPDATE_GENERAL_SUCCESS',\n  UPDATE_BUSINESS_SUCCESS = 'UPDATE_BUSINESS_SUCCESS',\n  UPDATE_IMMIGRANT_FAILED = 'UPDATE_IMMIGRANT_FAILED'\n\nexport const SEARCH_IMMIGRANT_REQUEST = 'SEARCH_IMMIGRANT_REQUEST',\n  SEARCH_IMMIGRANT_FAILED = 'SEARCH_IMMIGRANT_FAILED'\n","import moment from 'moment'\nimport {\n  experienceType,\n  languageProfType,\n  qualificationType,\n} from '../interface'\n\nconst { format } = require('number-currency-format')\nconst logout = (err: string) => {\n  if (err === 'Invalid token') {\n    removeLocal('user')\n    removeLocal('token')\n    window.location.reload()\n  }\n}\n\nexport const getObject = (collection: any[], key: number) => {\n  return collection.find((object: any) => object.id === key)\n}\n\nexport const toPlural = (val: number, text: string) =>\n  `${val} ${text}${(val > 1 && 's') || ''}`\n\nexport const getExt = (text: string) => `${text.split('.').pop()}`\n\nexport const handleErr = (error: any) => {\n  if (error.response) {\n    logout(error.response.data.message)\n    return error.response.data.message\n  } else if (error.message) {\n    logout(error.message)\n    return error.message\n  }\n}\n\nexport const getLocal = (name: string, parse: boolean = true) => {\n  const data = localStorage.getItem(name)\n  return data ? (parse ? JSON.parse(data) : data) : null\n}\nexport const setLocal = (name: string, content: Object | string) =>\n  localStorage.setItem(\n    name,\n    typeof content === 'object' ? JSON.stringify(content) : content\n  )\n\nexport const removeLocal = (name: string) => localStorage.removeItem(name)\n\nexport const _calculateAge = (birthday: string) => {\n  var ageDifMs = new Date().getTime() - new Date(birthday).getTime()\n  var ageDate = new Date(ageDifMs) // miliseconds from epoch\n  return Math.abs(ageDate.getUTCFullYear() - 1970)\n}\n\nconst formatNum = (num: number) =>\n  format(num, {\n    currency: '$',\n    showDecimals: 'NEVER',\n    currencyPosition: 'LEFT',\n    spacing: false,\n  })\n\nexport const fundsAction = (\n  funds: {\n    min: number\n    max: number\n    type: string\n    id: number\n  }[]\n) =>\n  funds\n    .sort((a, b) => a.min - b.min)\n    .map((fund) => ({\n      name:\n        fund.min === 0\n          ? `Less than ${formatNum(fund.max)}`\n          : fund.max === 0\n          ? `Above ${formatNum(fund.min)}`\n          : `${formatNum(fund.min)} to ${formatNum(fund.max)}`,\n      value: fund.id,\n    }))\n\nexport const dateDiffsToReadable = (date1: string, date2: string) => {\n  var a = moment(date1)\n  var b = moment(date2)\n\n  var years = b.diff(a, 'year')\n  a.add(years, 'years')\n\n  var months = b.diff(a, 'months')\n  a.add(months, 'months')\n\n  return `${years} years ${months ? `and ${months} months` : ''}`\n}\n\nexport const qualToString = (_qs: qualificationType[]) => {\n  let qs = ''\n\n  _qs.map(({ from, to, degree, school, city, country }, index) => {\n    qs += `(${dateDiffsToReadable(from, to)} ${\n      degree.title\n    } in ${school}, ${city} ${country.name})${\n      index + 1 === _qs.length ? '' : ','\n    } `\n    return null\n  })\n\n  return _qs.length ? qs : 'None'\n}\n\nexport const experienceToString = (_es: experienceType[]) => {\n  let es = ''\n\n  _es.map(({ from, to, employer, city, occupation, country }, index) => {\n    es += `(Worked ${dateDiffsToReadable(from, to)} as a/an ${\n      occupation.name\n    } in ${employer}, ${city} ${country.name})${\n      index + 1 === _es.length ? '' : ','\n    } `\n    return null\n  })\n\n  return _es.length ? es : 'None'\n}\n\nexport const laguageToString = (_ls: languageProfType[]) => {\n  let ls = ''\n\n  _ls.map(({ level, language }, index) => {\n    ls += `(${language.name} >> ${level})${\n      index + 1 === _ls.length ? '' : ','\n    } `\n    return null\n  })\n\n  return _ls.length ? ls : 'None'\n}\n","import Axios from 'axios'\nimport { toast } from 'react-toastify'\nimport { Dispatch } from 'redux'\nimport { URL } from '../config'\nimport {\n  BUSINESS_LIST_FAILED,\n  BUSINESS_LIST_REQUEST,\n  BUSINESS_LIST_SUCCESS,\n  GENERAL_LIST_FAILED,\n  GENERAL_LIST_REQUEST,\n  GENERAL_LIST_SUCCESS,\n  IMMIGRANT_LIST_FAILED,\n  IMMIGRANT_LIST_REQUEST,\n  IMMIGRANT_LIST_RESET,\n  IMMIGRANT_LIST_SUCCESS,\n  SEARCH_IMMIGRANT_FAILED,\n  SEARCH_IMMIGRANT_REQUEST,\n  UPDATE_IMMIGRANT_REQUEST,\n  UPDATE_GENERAL_SUCCESS,\n  UPDATE_IMMIGRANT_FAILED,\n  UPDATE_BUSINESS_SUCCESS,\n} from '../constants/immigrantsConstants'\nimport { handleErr } from '../helpers'\n\nexport type collectionType =\n  | 'generals'\n  | 'students'\n  | 'businesses'\n  | 'families'\n  | 'antigua'\n  | 'stkitts'\n\nexport const getImmigrants = (collection: collectionType) => async (\n  dispatch: Dispatch,\n  getState: any\n) => {\n  try {\n    dispatch({\n      type: IMMIGRANT_LIST_REQUEST,\n    })\n    const {\n      auth: { token },\n    } = getState()\n\n    const config = {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    }\n    const res = await Axios.get(`${URL}/immigrants/${collection}`, config)\n\n    dispatch({\n      type: IMMIGRANT_LIST_SUCCESS,\n      payload: res.data,\n    })\n  } catch (error) {\n    dispatch({\n      type: IMMIGRANT_LIST_FAILED,\n      payload: handleErr(error),\n    })\n    toast(handleErr(error))\n  }\n}\n\nexport const getBusinessImmigrants = () => async (\n  dispatch: Dispatch,\n  getState: any\n) => {\n  try {\n    dispatch({\n      type: BUSINESS_LIST_REQUEST,\n    })\n    const {\n      auth: { token },\n    } = getState()\n\n    const config = {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    }\n    const res = await Axios.get(`${URL}/immigrants/businesses`, config)\n\n    dispatch({\n      type: BUSINESS_LIST_SUCCESS,\n      payload: res.data,\n    })\n    return res.data\n  } catch (error) {\n    dispatch({\n      type: BUSINESS_LIST_FAILED,\n      payload: handleErr(error),\n    })\n    toast(handleErr(error))\n  }\n}\n\nexport const updateImmigrant = (\n  id: number,\n  data: any,\n  type: collectionType\n) => async (dispatch: Dispatch, getState: any) => {\n  try {\n    dispatch({\n      type: UPDATE_IMMIGRANT_REQUEST,\n    })\n    const {\n      auth: { token },\n    } = getState()\n\n    const config = {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    }\n    const res = await Axios.patch(\n      `${URL}/immigrants/${type}/${id}`,\n      data,\n      config\n    )\n    const dispatchType =\n      type === 'businesses' ? UPDATE_BUSINESS_SUCCESS : UPDATE_GENERAL_SUCCESS\n    dispatch({\n      type: dispatchType,\n      payload: res.data,\n    })\n    return res.data\n  } catch (error) {\n    dispatch({\n      type: UPDATE_IMMIGRANT_FAILED,\n      payload: handleErr(error),\n    })\n    toast(handleErr(error))\n  }\n}\n\nexport const getGeneralImmigrants = () => async (\n  dispatch: Dispatch,\n  getState: any\n) => {\n  try {\n    dispatch({\n      type: GENERAL_LIST_REQUEST,\n    })\n    const {\n      auth: { token },\n    } = getState()\n\n    const config = {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    }\n    const res = await Axios.get(`${URL}/immigrants/generals`, config)\n\n    dispatch({\n      type: GENERAL_LIST_SUCCESS,\n      payload: res.data,\n    })\n    return res.data\n  } catch (error) {\n    dispatch({\n      type: GENERAL_LIST_FAILED,\n      payload: handleErr(error),\n    })\n    toast(handleErr(error))\n  }\n}\n\nexport const resetImmigrantList = () => (dispatch: Dispatch) => {\n  dispatch({\n    type: IMMIGRANT_LIST_RESET,\n  })\n}\n\nexport const searchDb = (collection: collectionType, query: object) => async (\n  dispatch: Dispatch,\n  getState: any\n) => {\n  try {\n    dispatch({\n      type: SEARCH_IMMIGRANT_REQUEST,\n    })\n    const {\n      auth: { token },\n    } = getState()\n\n    const config = {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    }\n    let param = '?'\n\n    for (const [key, value] of Object.entries(query)) {\n      if (value.toString()) param += `${key}=${value}&`\n    }\n\n    const res = await Axios.get(\n      `${URL}/immigrants/${collection + param}`,\n      config\n    )\n\n    dispatch({\n      type:\n        collection === 'businesses'\n          ? BUSINESS_LIST_SUCCESS\n          : collection === 'generals'\n          ? GENERAL_LIST_SUCCESS\n          : IMMIGRANT_LIST_SUCCESS,\n      payload: res.data,\n    })\n  } catch (error) {\n    dispatch({\n      type: SEARCH_IMMIGRANT_FAILED,\n      payload: handleErr(error),\n    })\n    toast(handleErr(error))\n  }\n}\n","import React, { Component } from 'react'\r\n// import PhoneInput from 'react-phone-input-2'\r\nimport { FormFeedback, Input } from 'reactstrap'\r\nimport validator from 'validator'\r\n\r\ntype inputProps = {\r\n  isRequired?: boolean\r\n  required?: boolean\r\n  isEmail?: boolean\r\n  isPhoneNumber?: boolean\r\n  isPassword?: boolean\r\n  invalid?: boolean\r\n  value: any\r\n}\r\n\r\nclass TextValidator extends Component<inputProps> {\r\n  state = {\r\n    isValid: { valid: false, invalid: false },\r\n    feedBack: '',\r\n  }\r\n  componentDidUpdate() {\r\n    if (this.props.invalid && this.state.isValid.invalid === false)\r\n      this.changeState(false, 'this field is required')\r\n    else return null\r\n  }\r\n  render() {\r\n    const {\r\n        isRequired,\r\n        isEmail,\r\n        isPhoneNumber,\r\n        isPassword,\r\n        value,\r\n        ...rest\r\n      } = this.props,\r\n      {\r\n        isValid: { valid, invalid },\r\n      } = this.state\r\n\r\n    return (\r\n      <>\r\n        {/* {isPhoneNumber ? (\r\n          <PhoneInput\r\n            specialLabel={''}\r\n            country={'ng'}\r\n            value={value}\r\n            inputProps={{\r\n              ...rest,\r\n              onKeyUp: () =>\r\n                isRequired || rest.required ? this.errorText() : null,\r\n            }}\r\n            inputClass={`w-100 ${\r\n              valid ? 'is-valid' : invalid ? 'is-invalid' : ''\r\n            }`}\r\n          />\r\n        ) : ( */}\r\n        <Input\r\n          onKeyUp={() =>\r\n            isRequired || rest.required ? this.errorText() : null\r\n          }\r\n          type={\r\n            isPhoneNumber\r\n              ? 'tel'\r\n              : isEmail\r\n              ? 'email'\r\n              : isPassword\r\n              ? 'password'\r\n              : 'text'\r\n          }\r\n          value={value === null ? '' : value}\r\n          {...rest}\r\n          {...this.state.isValid}\r\n        />\r\n        {/* )} */}\r\n        {this.state.feedBack}\r\n      </>\r\n    )\r\n  }\r\n\r\n  changeState = (valid: boolean, feedBack: string) => {\r\n    this.setState({ isValid: { invalid: !valid, valid } })\r\n    this.setState({\r\n      feedBack: valid ? (\r\n        ''\r\n      ) : (\r\n        <FormFeedback style={{ display: 'block' }}>{feedBack}</FormFeedback>\r\n      ),\r\n    })\r\n  }\r\n\r\n  errorText() {\r\n    const {\r\n      isRequired,\r\n      required,\r\n      isEmail,\r\n      isPhoneNumber,\r\n      isPassword,\r\n      value,\r\n    } = this.props\r\n\r\n    const otherConditions = () => {\r\n      if (isEmail) {\r\n        this.changeState(validator.isEmail(value), 'Invalid email address')\r\n      } else if (isPhoneNumber) {\r\n        this.changeState(\r\n          validator.isMobilePhone(value.replaceAll(' ', ''), 'any'),\r\n          'Invalid phone number'\r\n        )\r\n      } else if (isPassword) {\r\n        this.changeState(\r\n          validator.isLength(value, { min: 6 }),\r\n          'Password must be at least 6 characters'\r\n        )\r\n      } else {\r\n        this.changeState(true, '')\r\n      }\r\n    }\r\n\r\n    if (isRequired || required) {\r\n      if (validator.isEmpty(value)) {\r\n        this.changeState(false, 'this field is required')\r\n      } else {\r\n        otherConditions()\r\n      }\r\n    } else {\r\n      otherConditions()\r\n    }\r\n  }\r\n}\r\n\r\nexport default TextValidator\r\n","import React from 'react'\r\nimport Datetime from 'react-datetime'\r\nimport Select from 'react-select'\r\nimport makeAnimated from 'react-select/animated'\r\nimport {\r\n  Col,\r\n  CustomInput,\r\n  FormGroup,\r\n  InputGroup,\r\n  InputGroupAddon,\r\n  InputGroupText,\r\n  InputProps,\r\n  Label,\r\n} from 'reactstrap'\r\nimport { ColProps } from 'reactstrap/lib/Col'\r\nimport { CustomInputProps } from 'reactstrap/lib/CustomInput'\r\nimport validator from 'validator'\r\nimport './style.css'\r\nimport TextValidator from './TextValidator'\r\n\r\nconst animatedComponents = makeAnimated()\r\n\r\nexport const TextInputGroup = ({\r\n  iconClass = '',\r\n  label = '',\r\n  invalid = false,\r\n  ...rest\r\n}: { iconClass?: string; label?: string } & InputProps) => {\r\n  return (\r\n    <>\r\n      {!validator.isEmpty(label) ? (\r\n        <label className='form-control-label mt-2' htmlFor={rest.name}>\r\n          {label}\r\n          {rest.required && <span className='text-danger'>*</span>}\r\n        </label>\r\n      ) : (\r\n        <></>\r\n      )}\r\n      <TextValidator invalid={invalid} value {...rest} />\r\n      {rest.subText && <small>{rest.subText}</small>}\r\n    </>\r\n  )\r\n}\r\n\r\nexport const FileInput = ({ iconClass = '', label = '', ...rest }) => {\r\n  return (\r\n    <FormGroup className='mb-2'>\r\n      {!validator.isEmpty(label) ? (\r\n        <label className='form-control-label mt-2' htmlFor={rest.name}>\r\n          {label}\r\n          {rest.required && <span className='text-danger'>*</span>}\r\n        </label>\r\n      ) : (\r\n        <></>\r\n      )}\r\n      <InputGroup className='input-group-alternative'>\r\n        {!validator.isEmpty(iconClass) ? (\r\n          <InputGroupAddon addonType='prepend'>\r\n            <InputGroupText>\r\n              <i className={iconClass} />\r\n            </InputGroupText>\r\n          </InputGroupAddon>\r\n        ) : (\r\n          ''\r\n        )}\r\n        <CustomInput\r\n          id={rest.name}\r\n          type='file'\r\n          {...rest}\r\n          label={rest.customLabel ? rest.customLabel : 'Choose file'}\r\n        />\r\n      </InputGroup>\r\n      {rest.subText && <small>{rest.subText}</small>}\r\n    </FormGroup>\r\n  )\r\n}\r\n\r\nexport const DateInputGroup = ({\r\n  onChange = (e: any) => {},\r\n  iconClass = '',\r\n  label = '',\r\n  value = '',\r\n  ...rest\r\n}) => {\r\n  return (\r\n    <FormGroup className='mb-2'>\r\n      {!validator.isEmpty(label) ? (\r\n        <label className='form-control-label mt-2' htmlFor={rest.name}>\r\n          {label}\r\n          {rest.required && <span className='text-danger'>*</span>}\r\n        </label>\r\n      ) : (\r\n        <></>\r\n      )}\r\n      <InputGroup className='input-group-alternative'>\r\n        {!validator.isEmpty(iconClass) ? (\r\n          <InputGroupAddon addonType='prepend'>\r\n            <InputGroupText>\r\n              <i className={iconClass} />\r\n            </InputGroupText>\r\n          </InputGroupAddon>\r\n        ) : (\r\n          ''\r\n        )}\r\n        <Datetime\r\n          onChange={(e) =>\r\n            //@ts-ignore\r\n            onChange({ target: { name: rest.name, value: e._d } })\r\n          }\r\n          closeOnSelect\r\n          timeFormat={false}\r\n          value={value}\r\n          {...{\r\n            rest,\r\n            inputProps: {\r\n              ...rest.inputProps,\r\n              style: { type: 'date' },\r\n              required: rest.required,\r\n              className: `form-control ${rest.invalid ? 'is-invalid' : ''}`,\r\n            },\r\n          }}\r\n        />\r\n      </InputGroup>\r\n    </FormGroup>\r\n  )\r\n}\r\n\r\nexport type radioOptions = {\r\n  id?: string | ''\r\n  label: string\r\n  value: string | number\r\n  selected?: boolean\r\n}\r\n\r\nexport const CheckBoxInput = ({\r\n  title,\r\n  label,\r\n  name,\r\n  required,\r\n  options,\r\n  inline,\r\n  onChange,\r\n  colProps,\r\n  ...rest\r\n}: {\r\n  title?: string\r\n  label?: string\r\n  name: string\r\n  required?: boolean | false\r\n  options: radioOptions[]\r\n  inline?: boolean | false\r\n  onChange: (e: any) => void\r\n  colProps: ColProps\r\n} & CustomInputProps) => {\r\n  return (\r\n    <>\r\n      <Col sm='12'>\r\n        <Label className='mt-2'>{title || label}</Label>\r\n      </Col>\r\n      {options.map((option) => (\r\n        <Col {...colProps} key={option.id}>\r\n          <FormGroup className='mb-0'>\r\n            <CustomInput\r\n              {...rest}\r\n              id={`${option.id}`}\r\n              name={name}\r\n              value={option.value}\r\n              label={option.label}\r\n              inline={inline}\r\n              onChange={onChange}\r\n              defaultChecked={option.selected || false}\r\n              required={required}\r\n            />\r\n          </FormGroup>\r\n        </Col>\r\n      ))}\r\n    </>\r\n  )\r\n}\r\n\r\nexport const RadioInput = ({\r\n  title,\r\n  name,\r\n  id = name,\r\n  required,\r\n  options,\r\n  inline,\r\n  onSelect,\r\n  ...rest\r\n}: {\r\n  title?: string\r\n  name: string\r\n  id?: any\r\n  required?: boolean\r\n  options: radioOptions[]\r\n  inline?: boolean | false\r\n  onSelect: (e: any) => void\r\n} & CustomInputProps) => {\r\n  return (\r\n    <FormGroup className='mb-2'>\r\n      {title && <Label className='mt-2'>{title}</Label>}\r\n      <div>\r\n        {options.map((option, key) => (\r\n          <CustomInput\r\n            {...rest}\r\n            key={key}\r\n            id={`${id + key}`}\r\n            name={name}\r\n            value={option.value}\r\n            label={option.label}\r\n            inline={inline}\r\n            onChange={onSelect}\r\n            defaultChecked={option.selected || false}\r\n            required={required}\r\n          />\r\n        ))}\r\n      </div>\r\n    </FormGroup>\r\n  )\r\n}\r\n\r\nexport const CheckBoxes = ({\r\n  title,\r\n  required,\r\n  options,\r\n  inline,\r\n  onSelect,\r\n  type = 'checkbox',\r\n  ...rest\r\n}: {\r\n  title: string\r\n  required?: boolean | false\r\n  invalid?: boolean | false\r\n  options: radioOptions[]\r\n  inline?: boolean | false\r\n  onSelect: (e: any) => void\r\n} & CustomInputProps) => {\r\n  return (\r\n    <FormGroup className='mb-2'>\r\n      <Label className='mt-2'>{title}</Label>\r\n      <div>\r\n        {options.map((option, key) => (\r\n          <CustomInput\r\n            {...rest}\r\n            className='mb-2'\r\n            key={key}\r\n            type={type}\r\n            id={`${option.id}`}\r\n            name={rest.name}\r\n            value={option.value}\r\n            label={option.label}\r\n            inline={inline}\r\n            onChange={onSelect}\r\n            defaultChecked={option.selected || false}\r\n            required={required}\r\n          />\r\n        ))}\r\n      </div>\r\n    </FormGroup>\r\n  )\r\n}\r\n\r\nexport const SelectGroup = ({\r\n  placeholder,\r\n  name,\r\n  options = [],\r\n  onSelect,\r\n  id = '',\r\n  required = false,\r\n  value = '',\r\n  iconClass = '',\r\n  disabled = false,\r\n  label = '',\r\n  defaultValue = '',\r\n  ...rest\r\n}: {\r\n  value?: string | number\r\n  id?: string\r\n  invalid?: boolean | false\r\n  subText?: string\r\n  bsSize?: 'sm' | 'lg'\r\n  defaultValue?: string\r\n  placeholder: string\r\n  name: string\r\n  required?: boolean\r\n  options: {\r\n    name: string\r\n    value: string | number\r\n    code?: string\r\n    title?: string\r\n    selected?: boolean\r\n  }[]\r\n  onSelect: (e: any) => void\r\n  iconClass?: string\r\n  disabled?: boolean\r\n  label?: string\r\n  labelClass?: string\r\n}) => {\r\n  return (\r\n    <FormGroup className='mb-2'>\r\n      {!validator.isEmpty(label) ? (\r\n        <label\r\n          className={`mt-2 form-control-label ${\r\n            rest.labelClass ? rest.labelClass : ''\r\n          }`}\r\n          htmlFor={name}\r\n        >\r\n          {required && <span className='text-danger'>* </span>}\r\n          {label}\r\n        </label>\r\n      ) : (\r\n        <></>\r\n      )}\r\n      <InputGroup className='input-group-alternative'>\r\n        {!validator.isEmpty(iconClass) ? (\r\n          <InputGroupAddon addonType='prepend'>\r\n            <InputGroupText>\r\n              <i className={iconClass} />\r\n            </InputGroupText>\r\n          </InputGroupAddon>\r\n        ) : (\r\n          ''\r\n        )}\r\n        <CustomInput\r\n          type='select'\r\n          id={id}\r\n          name={name}\r\n          onChange={onSelect}\r\n          required={required}\r\n          disabled={disabled}\r\n          {...rest}\r\n        >\r\n          <option value='' defaultValue='' disabled={value ? true : false}>\r\n            {placeholder}\r\n          </option>\r\n          {options.map((item, key) => {\r\n            if (item.title) item.name = item.title\r\n\r\n            return (\r\n              <option\r\n                defaultValue={item.name}\r\n                key={key}\r\n                value={item.value}\r\n                selected={!!item.selected}\r\n              >\r\n                {item.name}\r\n              </option>\r\n            )\r\n          })}\r\n        </CustomInput>\r\n      </InputGroup>\r\n      {rest.subText && (\r\n        <small\r\n          className={`form-control-label ${\r\n            rest.labelClass ? rest.labelClass : ''\r\n          }`}\r\n        >\r\n          {rest.subText}\r\n        </small>\r\n      )}\r\n    </FormGroup>\r\n  )\r\n}\r\n\r\nexport const CustomSelectGroup = ({\r\n  placeholder,\r\n  options,\r\n  onSelect,\r\n  iconClass = '',\r\n  label = '',\r\n  isMulti = false,\r\n  ...rest\r\n}: {\r\n  label?: string\r\n  placeholder: string\r\n  isMulti?: boolean\r\n  options: any[]\r\n  onSelect: (e: any) => void\r\n  iconClass?: string\r\n} & InputProps) => {\r\n  console.log(options)\r\n\r\n  return (\r\n    <FormGroup className='mb-2'>\r\n      {!validator.isEmpty(label) ? (\r\n        <label className='form-control-label mt-2' htmlFor={rest.name}>\r\n          {label}\r\n          {rest.required && <span className='text-danger'>*</span>}\r\n        </label>\r\n      ) : (\r\n        <></>\r\n      )}\r\n      <InputGroup className='input-group-alternative'>\r\n        {!validator.isEmpty(iconClass) ? (\r\n          <InputGroupAddon addonType='prepend'>\r\n            <InputGroupText>\r\n              <i className={iconClass} />\r\n            </InputGroupText>\r\n          </InputGroupAddon>\r\n        ) : (\r\n          ''\r\n        )}\r\n\r\n        <Select\r\n          onChange={onSelect}\r\n          required={rest.required}\r\n          className='form-control h-auto p-0'\r\n          components={animatedComponents}\r\n          isMulti={isMulti}\r\n          placeholder={placeholder}\r\n          options={options}\r\n        />\r\n      </InputGroup>\r\n    </FormGroup>\r\n  )\r\n}\r\n","import React from \"react\";\r\nimport { RingLoader } from \"react-spinners\";\r\nimport \"./style.scss\";\r\n\r\nconst Loading = ({ show }: { show: boolean }) =>\r\n  show ? (\r\n    <div className=\"text-center overlay\">\r\n      <div className=\"\">\r\n        <RingLoader />\r\n      </div>\r\n    </div>\r\n  ) : (\r\n    <span></span>\r\n  );\r\n\r\nexport default Loading;\r\n","export default __webpack_public_path__ + \"static/media/bg1.d4d14e2f.jpg\";","export default __webpack_public_path__ + \"static/media/logo.cce7c0c2.png\";","export default __webpack_public_path__ + \"static/media/Avatar-1.9e978fae.png\";","import React from 'react';\r\nimport './style.scss';\r\n\r\nconst Section: (props: {\r\n  className?: string;\r\n  bgImage?: boolean;\r\n  bgImageSrc?: string;\r\n  width?: 'container' | 'container-fluid';\r\n  styles?: { backgroundImage?: string };\r\n  children?: any;\r\n  id?: string;\r\n}) => any = ({\r\n  bgImage = false,\r\n  bgImageSrc,\r\n  className,\r\n  styles = {},\r\n  children,\r\n  id,\r\n  width = ''\r\n}) => {\r\n  bgImage && bgImageSrc\r\n    ? (styles.backgroundImage = `url(${bgImageSrc})`)\r\n    : console.log();\r\n  return (\r\n    <section\r\n      id={id}\r\n      className={`py-5 ${width} ${className +\r\n        ' ' +\r\n        (bgImage ? 'bg-image' : '')}`}\r\n      style={{ ...styles }}\r\n    >\r\n      {children}\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Section;\r\n","import { AxiosPromise } from 'axios'\nimport moment from 'moment'\nimport React, { Component } from 'react'\nimport { CSVLink } from 'react-csv'\nimport NumberFormat from 'react-number-format'\nimport { connect } from 'react-redux'\nimport { Card, Col, Row, Table } from 'reactstrap'\nimport {\n  collectionType,\n  getImmigrants,\n  searchDb,\n} from '../actions/ImmigrantActions'\nimport { TextInputGroup } from '../components/Form'\nimport Loading from '../components/Loading'\nimport { antiguaType } from '../interface/antiguaType'\n\nconst data = {\n  titles: [\n    '',\n    'Name',\n    'email',\n    'phone',\n    'married',\n    'invest funds',\n    'networth',\n    'residence',\n    'nationality',\n    'rejected',\n    'deported',\n    'O dep',\n    'Y dep',\n    'T dep',\n    'A dep',\n    'contact med',\n    'ref',\n    'time',\n  ],\n}\n\nclass Antigua extends Component<{\n  getImmigrants: (collection: collectionType) => AxiosPromise\n  searchDb: (collection: collectionType, searchParam: string) => AxiosPromise\n  immigrantList: antiguaType[]\n}> {\n  state = { search: '', loading: false }\n\n  async componentDidMount() {\n    this.setState({ loading: true })\n    await this.props\n      .getImmigrants('antigua')\n      .then((res) => this.setState({ loading: false }))\n      .catch((err) => this.setState({ loading: false }))\n  }\n\n  onChange = (e?: any) => {\n    this.setState({ [e.target.name]: e.target.value })\n    this.onSearch(e.target.value)\n  }\n\n  onSearch = (param: string) =>\n    this.setState({ loading: true }, () =>\n      this.props\n        .searchDb('antigua', param)\n        .then((res) => this.setState({ loading: false }))\n        .catch((err) => this.setState({ loading: false }))\n    )\n\n  render() {\n    const { immigrantList } = this.props\n    return (\n      <div id='requests' className='px-0 w-100 mx-auto'>\n        <Loading show={this.state.loading} />\n        <Row>\n          <Col>\n            <h2>Antigua</h2>\n          </Col>\n        </Row>\n        <Row>\n          <Col sm={8}>\n            <TextInputGroup\n              onChange={(e: any) => this.onChange(e)}\n              name={'search'}\n              value={this.state.search}\n              placeholder='Search...'\n            />\n          </Col>\n          <Col sm={4}>\n            <CSVLink\n              data={immigrantList.map(\n                ({\n                  first_name,\n                  last_name,\n                  email,\n                  phone,\n                  married,\n                  old_dependents,\n                  young_dependents,\n                  teen_dependents,\n                  average_dependents,\n                  rejected,\n                  deported,\n                  contact_medium,\n                  referee,\n                  createdAt,\n                  investRange,\n                  networthRange,\n                  residenceCountry,\n                  nationalityCountry,\n                  RejectedCountries,\n                  DeportedCountries,\n                }) => ({\n                  first_name,\n                  last_name,\n                  email,\n                  phone,\n                  married,\n                  old_dependents,\n                  young_dependents,\n                  teen_dependents,\n                  average_dependents,\n                  contact_medium,\n                  referee,\n                  createdAt,\n                  invest: `${investRange.min}-${investRange.max}`,\n                  networth: `${networthRange.min}-${networthRange.max}`,\n                  residenceCountry: residenceCountry.name,\n                  nationalityCountry: nationalityCountry.name,\n                  RejectedCountries,\n                  DeportedCountries,\n                  rejected: rejected\n                    ? RejectedCountries.map((country) => (\n                        <span className='' key={country.id}>\n                          {country.name},{' '}\n                        </span>\n                      ))\n                    : 'No',\n                  deported: deported\n                    ? DeportedCountries.map((country) => (\n                        <span className='' key={country.id}>\n                          {country.name},{' '}\n                        </span>\n                      ))\n                    : 'No',\n                })\n              )}\n              target='_blank'\n              className='btn btn-primary btn-block'\n              filename='Antigua-Immigrants'\n            >\n              Export to CSV\n            </CSVLink>\n          </Col>\n        </Row>\n        <Card className='p-0 resp'>\n          <Table responsive striped bordered>\n            <thead>\n              <tr>\n                {data.titles.map((title, key) => (\n                  <th className='text-capitalize' key={key}>\n                    {title}\n                  </th>\n                ))}\n              </tr>\n            </thead>\n            <tbody>\n              {immigrantList.map((immigrant, key: any) => {\n                const {\n                  first_name,\n                  last_name,\n                  email,\n                  phone,\n                  married,\n                  old_dependents,\n                  young_dependents,\n                  teen_dependents,\n                  average_dependents,\n                  rejected,\n                  deported,\n                  contact_medium,\n                  referee,\n                  createdAt,\n                  investRange,\n                  networthRange,\n                  residenceCountry,\n                  nationalityCountry,\n                  RejectedCountries,\n                  DeportedCountries,\n                } = immigrant\n                return (\n                  <tr key={key}>\n                    <th scope='row'>{key + 1}</th>\n                    <td>{`${first_name} ${last_name}`}</td>\n                    <td>{email}</td>\n                    <td>{phone}</td>\n                    <td>{married}</td>\n                    <td>\n                      <NumberFormat\n                        thousandSeparator\n                        prefix='$'\n                        value={investRange.min}\n                        displayType='text'\n                      />\n                      {' - '}\n                      <NumberFormat\n                        thousandSeparator\n                        prefix='$'\n                        value={investRange.max}\n                        displayType='text'\n                      />\n                    </td>\n                    <td>\n                      <NumberFormat\n                        thousandSeparator\n                        prefix='$'\n                        value={networthRange.min}\n                        displayType='text'\n                      />\n                      {' - '}\n                      <NumberFormat\n                        thousandSeparator\n                        prefix='$'\n                        value={networthRange.max}\n                        displayType='text'\n                      />\n                    </td>\n                    <td>{residenceCountry.name}</td>\n                    <td>{nationalityCountry.name}</td>\n                    <td>\n                      {rejected\n                        ? RejectedCountries.map((country) => (\n                            <span className='' key={country.id}>\n                              {country.name},{' '}\n                            </span>\n                          ))\n                        : 'No'}\n                    </td>\n                    <td>\n                      {deported\n                        ? DeportedCountries.map((country) => (\n                            <span className='' key={country.id}>\n                              {country.name},{' '}\n                            </span>\n                          ))\n                        : 'No'}\n                    </td>\n                    <td>{old_dependents}</td>\n                    <td>{young_dependents}</td>\n                    <td>{teen_dependents}</td>\n                    <td>{average_dependents}</td>\n                    <td>{contact_medium}</td>\n                    <td>{referee}</td>\n                    <td>{moment(createdAt).format('L | HH:mm')}</td>\n                  </tr>\n                )\n              })}\n            </tbody>\n          </Table>\n          {!immigrantList.length && (\n            <div className='text-center'>\n              <strong>No result found</strong>\n            </div>\n          )}\n        </Card>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = ({ immigrantList }: { immigrantList: [] }) => ({\n  ...immigrantList,\n})\n\n//@ts-ignore\nexport default connect(mapStateToProps, { getImmigrants, searchDb })(Antigua)\n","import { AxiosPromise } from 'axios'\nimport moment from 'moment'\nimport React, { Component } from 'react'\nimport { CSVLink } from 'react-csv'\nimport NumberFormat from 'react-number-format'\nimport { connect } from 'react-redux'\nimport { withRouter } from 'react-router'\nimport { toast } from 'react-toastify'\nimport { Button, Card, Col, Row, Table } from 'reactstrap'\nimport {\n  collectionType,\n  getBusinessImmigrants,\n  searchDb,\n  updateImmigrant,\n} from '../actions/ImmigrantActions'\nimport { DateInputGroup, SelectGroup, TextInputGroup } from '../components/Form'\nimport Loading from '../components/Loading'\nimport { qualToString, _calculateAge } from '../helpers'\nimport { businessType } from '../interface/businessType'\n\nconst data = {\n  titles: [\n    { title: '', field: 'id' },\n    { title: 'Convert To Client', field: 'client_status' },\n    { title: 'Name', field: 'name' },\n    { title: 'group', field: 'group' },\n    { title: 'Eligible Party', field: 'eligible_party' },\n    { title: 'invest funds', field: 'investRange' },\n    { title: 'networth', field: 'networthRange' },\n    { title: 'nationality', field: 'citizenshipCountry' },\n    { title: 'Residence', field: 'residenceCountry' },\n    { title: 'email', field: 'email' },\n    { title: 'phone', field: 'phone' },\n    { title: 'DOB', field: 'dob' },\n    { title: 'Married', field: 'Married' },\n    { title: 'Man Experience', field: 'managerial_experience' },\n    { title: 'Qualifications', field: 'qualifications' },\n    { title: 'Spouse', field: 'spouse' },\n    { title: 'Created At', field: 'createdAt' },\n  ],\n}\n\nclass Business extends Component<{\n  getBusinessImmigrants: (collection: collectionType) => AxiosPromise\n  updateImmigrant: (id: number, data: any, type: collectionType) => AxiosPromise\n  searchDb: (collection: collectionType, searchParam: object) => AxiosPromise\n  businessList: businessType[]\n  countries: { name: string; value: number }[]\n  title: string\n  investRanges: { name: string; value: number }[]\n}> {\n  state = {\n    _q: '',\n    invest_funds: '',\n    loading: false,\n    query: {},\n    startDate: '',\n    endDate: '',\n    sortConfig: { field: null, asc: true },\n    isClients: 0,\n  }\n\n  async componentDidMount() {\n    // @ts-ignore\n    const { id } = this.props.match.params\n    const isClients = id === 'clients' ? 1 : 0\n    this.setState({ loading: true, isClients })\n    await this.props\n      .searchDb(`businesses`, { client_status: isClients })\n      .then((data) => this.setState({ loading: false, data }))\n      .catch((err) => this.setState({ loading: false }))\n  }\n\n  enableKeyboard = () => (document.onkeypress = () => true)\n  disableKeyboard = () => (document.onkeypress = () => false)\n\n  sortData = (sortField: any) => {\n    const {\n      sortConfig: { field, asc },\n    } = this.state\n    const direction = sortField === field ? !asc : asc\n    this.props.businessList.sort((a: any, b: any) => {\n      let _a = a[sortField],\n        _b = b[sortField]\n\n      return typeof _a === 'string'\n        ? direction\n          ? _a.toLowerCase() < _b.toLowerCase()\n            ? -1\n            : _a.toLowerCase() > _b.toLowerCase()\n            ? 1\n            : 0\n          : -1\n        : direction\n        ? _a - _b\n        : _b - _a\n    })\n    this.setState({\n      sortConfig: { field: sortField, asc: direction },\n    })\n  }\n\n  onChange = (e?: any) => {\n    this.setState({\n      query: { ...this.state.query, [e.target.name]: e.target.value },\n      [e.target.name]: e.target.value,\n    })\n    this.onSearch()\n  }\n\n  onSearch = () =>\n    this.setState({ loading: true }, () =>\n      this.props\n        .searchDb('businesses', {\n          ...this.state.query,\n          client_status: this.state.isClients,\n        })\n        .then((res) => this.setState({ loading: false }))\n        .catch((err) => this.setState({ loading: false }))\n    )\n\n  updateImmigrant = (id: number) =>\n    this.setState({ loading: true }, () =>\n      this.props\n        .updateImmigrant(id, { client_status: true }, 'businesses')\n        .then((res) =>\n          this.setState({ loading: false }, () => {\n            toast('Selected lead is now a client')\n          })\n        )\n        .catch((err) =>\n          this.setState({ loading: false }, () => {\n            toast(err.response.message)\n          })\n        )\n    )\n\n  render() {\n    const { businessList, investRanges, title } = this.props,\n      {\n        loading,\n        invest_funds,\n        startDate,\n        endDate,\n        sortConfig: { asc, field: sortField },\n        isClients,\n      } = this.state\n    return (\n      <div id='requests' className='px-0 w-100 mx-auto'>\n        <Loading show={loading} />\n        <Row>\n          <Col>\n            <h2>\n              {title} {isClients ? 'Clients' : 'Leads'}\n            </h2>\n          </Col>\n        </Row>\n        <Row>\n          <Col sm={6} className='pb-3'>\n            <TextInputGroup\n              onChange={(e: any) => this.onChange(e)}\n              name='_q'\n              value={this.state._q}\n              placeholder='Search...'\n              subText={\n                <i className='text-gray'>\n                  searches <span className='text-info'>firstname</span>,{' '}\n                  <span className='text-info'>lastname</span>,{' '}\n                  <span className='text-info'>email</span>,{' '}\n                  <span className='text-info'>phone</span>,{' '}\n                  <span className='text-info'>eligible party</span> and{' '}\n                  <span className='text-info'>group</span>\n                </i>\n              }\n            />\n          </Col>\n          <Col sm={3} xs={6} className='pr-1'>\n            <CSVLink\n              data={businessList.map(\n                ({\n                  first_name,\n                  last_name,\n                  email,\n                  group,\n                  dob,\n                  eligible_party,\n                  phone,\n                  spouse,\n                  createdAt,\n                  investRange,\n                  networthRange,\n                  managerial_experience,\n                  residenceCountry,\n                  citizenshipCountry,\n                  qualifications,\n                }) => ({\n                  first_name,\n                  last_name,\n                  email,\n                  group,\n                  dob,\n                  eligible_party,\n                  phone,\n                  married: spouse !== null,\n                  invest: `${investRange.min}-${investRange.max}`,\n                  networth: `${networthRange.min}-${networthRange.max}`,\n                  residenceCountry: residenceCountry.name,\n                  citizenshipCountry: citizenshipCountry.name,\n                  managerial_experience,\n                  qualifications: qualToString(qualifications),\n                  spouse: spouse\n                    ? `${_calculateAge(spouse.dob)} years | ${\n                        spouse.birthCountry.name\n                      } \\n| ${qualToString(spouse.qualifications)}`\n                    : 'NIL',\n                  createdAt,\n                })\n              )}\n              target='_blank'\n              className='btn btn-primary btn-block'\n              filename='Business-Immigrants'\n            >\n              Exp All\n            </CSVLink>\n          </Col>\n          <Col sm={3} xs={6} className='pl-1'>\n            <CSVLink\n              data={businessList.map(\n                ({ first_name, last_name, email, phone }) => ({\n                  first_name,\n                  last_name,\n                  email,\n                  phone,\n                })\n              )}\n              target='_blank'\n              className='btn btn-info btn-block'\n              filename='Business-Immigrants(filtered)'\n            >\n              Exp Few\n            </CSVLink>\n          </Col>\n        </Row>\n\n        <Row className='mt-3'>\n          <Col sm='12'>\n            <h4>Filter By:</h4>\n          </Col>\n          <Col xs='6'>\n            <SelectGroup\n              id='invest_funds'\n              name='invest_funds'\n              value={invest_funds}\n              options={[{ name: 'None', value: '' }, ...investRanges]}\n              placeholder='Select...'\n              onSelect={this.onChange}\n              label='Available to Invest'\n              bsSize='sm'\n            />\n          </Col>\n          <Col xs='3' className='pr-1'>\n            <DateInputGroup\n              inputProps={{\n                style: { type: 'date', border: '1px solid #cad1d7' },\n                required: true,\n                placeholder: 'from',\n                class: 'form-control-sm form-control filter-input',\n              }}\n              label='Created'\n              onFocus={this.disableKeyboard}\n              onBlur={this.enableKeyboard}\n              value={startDate}\n              autoComplete='off'\n              name='startDate'\n              id='startDate'\n              onChange={(e) =>\n                this.onChange({\n                  ...e,\n                  target: { ...e.target, name: 'startDate' },\n                })\n              }\n            />\n          </Col>\n          <Col xs='3' className='pl-1'>\n            <DateInputGroup\n              inputProps={{\n                style: { type: 'date', border: '1px solid #cad1d7' },\n                required: true,\n                placeholder: 'to',\n                class: 'form-control-sm form-control filter-input',\n              }}\n              label='-'\n              onFocus={this.disableKeyboard}\n              onBlur={this.enableKeyboard}\n              value={endDate}\n              autoComplete='off'\n              name='endDate'\n              id='endDate'\n              onChange={(e) =>\n                this.onChange({\n                  ...e,\n                  target: { ...e.target, name: 'endDate' },\n                })\n              }\n            />\n          </Col>\n        </Row>\n        <Card className='p-0 resp mt-3'>\n          <Table responsive striped bordered>\n            <thead>\n              <tr>\n                {data.titles.map(({ title, field }, key) =>\n                  isClients && field === 'client_status' ? (\n                    ''\n                  ) : (\n                    <th className='text-capitalize' key={key}>\n                      {title}{' '}\n                      <button\n                        className='d-inline btn btn-link px-0'\n                        onClick={() => this.sortData(field)}\n                      >\n                        <i\n                          className={`fa fa-angle-down mr-0 ${\n                            sortField === field && asc ? 'text-secondary' : ''\n                          }`}\n                        ></i>\n                        <i\n                          className={`fa fa-angle-up mr-0 ${\n                            sortField === field && !asc ? 'text-secondary' : ''\n                          }`}\n                        ></i>\n                      </button>\n                    </th>\n                  )\n                )}\n              </tr>\n            </thead>\n            <tbody>\n              {businessList.map((immigrant, key: any) => {\n                const {\n                  first_name,\n                  last_name,\n                  email,\n                  group,\n                  dob,\n                  eligible_party,\n                  phone,\n                  qualifications,\n                  spouse,\n                  createdAt,\n                  investRange,\n                  networthRange,\n                  managerial_experience,\n                  residenceCountry,\n                  citizenshipCountry,\n                  id,\n                  client_status,\n                } = immigrant\n                return (\n                  <tr key={key}>\n                    <th scope='row'>{key + 1}</th>\n                    {isClients ? (\n                      ''\n                    ) : (\n                      <td>\n                        <Button\n                          color={client_status ? 'secondary' : 'success'}\n                          onClick={() => this.updateImmigrant(id)}\n                          size='sm'\n                          disabled={client_status}\n                        >\n                          {client_status ? 'Converted' : 'Convert to Client'}\n                        </Button>\n                      </td>\n                    )}\n                    <td>{`${first_name} ${last_name}`}</td>\n                    <td>Group {group}</td>\n                    <td>{eligible_party}</td>\n                    <td>\n                      <NumberFormat\n                        thousandSeparator\n                        prefix='$'\n                        value={investRange.min}\n                        displayType='text'\n                      />\n                      {' - '}\n                      <NumberFormat\n                        thousandSeparator\n                        prefix='$'\n                        value={investRange.max}\n                        displayType='text'\n                      />\n                    </td>\n                    <td>\n                      <NumberFormat\n                        thousandSeparator\n                        prefix='$'\n                        value={networthRange.min}\n                        displayType='text'\n                      />\n                      {' - '}\n                      <NumberFormat\n                        thousandSeparator\n                        prefix='$'\n                        value={networthRange.max}\n                        displayType='text'\n                      />\n                    </td>\n                    <td>{citizenshipCountry.name}</td>\n                    <td>{residenceCountry.name}</td>\n                    <td>{email}</td>\n                    <td>{phone}</td>\n                    <td>{_calculateAge(dob)}</td>\n                    <td>{spouse !== null ? 'true' : 'false'}</td>\n                    <td>{managerial_experience ? 'true' : 'false'}</td>\n                    <td>{qualToString(qualifications)}</td>\n                    <td>\n                      {spouse ? (\n                        <>\n                          <strong>Age:</strong>{' '}\n                          {`${_calculateAge(spouse.dob)} years`}\n                          <br />\n                          <strong>Quals:</strong>{' '}\n                          {qualToString(spouse.qualifications)}\n                          <br />\n                        </>\n                      ) : (\n                        'NIL'\n                      )}\n                    </td>\n\n                    <td>{moment(createdAt).format('L | HH:mm')}</td>\n                  </tr>\n                )\n              })}\n            </tbody>\n          </Table>\n          {!businessList.length && (\n            <div className='text-center'>\n              <strong>No result found</strong>\n            </div>\n          )}\n        </Card>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = ({ businessList }: { businessList: [] }) => ({\n  ...businessList,\n})\nconst connectProps = connect(mapStateToProps, {\n  getBusinessImmigrants,\n  searchDb,\n  updateImmigrant,\n})\n//@ts-ignore\nexport default connectProps(withRouter(Business))\n","import { AxiosPromise } from 'axios'\nimport moment from 'moment'\nimport React, { Component } from 'react'\nimport { CSVLink } from 'react-csv'\nimport { connect } from 'react-redux'\nimport { withRouter } from 'react-router'\nimport { toast } from 'react-toastify'\nimport { Button, Card, Col, Row, Table } from 'reactstrap'\nimport {\n  collectionType,\n  getGeneralImmigrants,\n  searchDb,\n  updateImmigrant,\n} from '../actions/ImmigrantActions'\nimport { DateInputGroup, TextInputGroup } from '../components/Form'\nimport Loading from '../components/Loading'\nimport {\n  experienceToString,\n  laguageToString,\n  qualToString,\n  _calculateAge,\n} from '../helpers'\nimport { generalType } from '../interface/generalType'\n\nconst data = {\n  titles: [\n    { title: '', field: 'id' },\n    { title: 'Convert To Client', field: 'client_status' },\n    { title: 'Name', field: 'name' },\n    { title: 'group', field: 'group' },\n    { title: 'Eligible Party', field: 'eligible_party' },\n    { title: 'nationality', field: 'citizenshipCountry' },\n    { title: 'Residence', field: 'residenceCountry' },\n    { title: 'email', field: 'email' },\n    { title: 'phone', field: 'phone' },\n    { title: 'DOB', field: 'dob' },\n    { title: 'Married', field: 'Married' },\n    { title: 'Qualifications', field: 'qualifications' },\n    { title: 'Experience', field: 'work_histories' },\n    { title: 'Language Prof', field: 'language_proficiencies' },\n    { title: 'Spouse', field: 'spouse' },\n    { title: 'Children', field: 'children' },\n    { title: 'Criminal Rec?', field: 'criminal_record' },\n    { title: 'Famili in CA?', field: 'family_in_canada' },\n    { title: 'Job Offer?', field: 'job_offer' },\n    { title: 'Medical Condition?', field: 'medical_condition' },\n    { title: 'Comment', field: 'comment' },\n    { title: 'Created At', field: 'createdAt' },\n  ],\n}\n\nclass General extends Component<{\n  getGeneralImmigrants: () => AxiosPromise\n  updateImmigrant: (id: number, data: any, type: collectionType) => AxiosPromise\n  searchDb: (collection: collectionType, searchParam: object) => AxiosPromise\n  generalList: generalType[]\n  title: string\n  countries: { name: string; value: number }[]\n}> {\n  state = {\n    _q: '',\n    loading: false,\n    query: {},\n    startDate: '',\n    endDate: '',\n    sortConfig: { field: null, asc: true },\n    isClients: 0,\n  }\n\n  async componentDidMount() {\n    // @ts-ignore\n    const { id } = this.props.match.params\n    const isClients = id === 'clients' ? 1 : 0\n    this.setState({ loading: true, isClients })\n    await this.props\n      .searchDb('generals', { client_status: isClients })\n      .then((data) => this.setState({ loading: false, data }))\n      .catch((err) => this.setState({ loading: false }))\n  }\n\n  enableKeyboard = () => (document.onkeypress = () => true)\n  disableKeyboard = () => (document.onkeypress = () => false)\n\n  sortData = (sortField: any) => {\n    const {\n      sortConfig: { field, asc },\n    } = this.state\n    const direction = sortField === field ? !asc : asc\n    this.props.generalList.sort((a: any, b: any) => {\n      let _a = a[sortField],\n        _b = b[sortField]\n\n      return typeof _a === 'string'\n        ? direction\n          ? _a.toLowerCase() < _b.toLowerCase()\n            ? -1\n            : _a.toLowerCase() > _b.toLowerCase()\n            ? 1\n            : 0\n          : -1\n        : direction\n        ? _a - _b\n        : _b - _a\n    })\n    this.setState({\n      sortConfig: { field: sortField, asc: direction },\n    })\n  }\n\n  onChange = (e?: any) => {\n    this.setState({\n      query: { ...this.state.query, [e.target.name]: e.target.value },\n      [e.target.name]: e.target.value,\n    })\n    this.onSearch()\n  }\n\n  onSearch = () =>\n    this.setState({ loading: true }, () =>\n      this.props\n        .searchDb('generals', {\n          ...this.state.query,\n          client_status: this.state.isClients,\n        })\n        .then((res) => this.setState({ loading: false }))\n        .catch((err) => this.setState({ loading: false }))\n    )\n\n  updateImmigrant = (id: number) =>\n    this.setState({ loading: true }, () =>\n      this.props\n        .updateImmigrant(id, { client_status: true }, 'generals')\n        .then((res) =>\n          this.setState({ loading: false }, () => {\n            toast('Selected lead is now a client')\n          })\n        )\n        .catch((err) =>\n          this.setState({ loading: false }, () => {\n            toast(err.response.message)\n          })\n        )\n    )\n\n  render() {\n    const { generalList, title } = this.props,\n      {\n        loading,\n        startDate,\n        endDate,\n        sortConfig: { asc, field: sortField },\n        isClients,\n      } = this.state\n    return (\n      <div id='requests' className='px-0 w-100 mx-auto'>\n        <Loading show={loading} />\n        <Row>\n          <Col>\n            <h2>\n              {title} {isClients ? 'Clients' : 'Leads'}\n            </h2>\n          </Col>\n        </Row>\n        <Row>\n          <Col sm={6} className='pb-3'>\n            <TextInputGroup\n              onChange={(e: any) => this.onChange(e)}\n              name='_q'\n              value={this.state._q}\n              placeholder='Search...'\n              subText={\n                <i className='text-gray'>\n                  searches <span className='text-info'>firstname</span>,{' '}\n                  <span className='text-info'>lastname</span>,{' '}\n                  <span className='text-info'>email</span>,{' '}\n                  <span className='text-info'>phone</span>,{' '}\n                  <span className='text-info'>eligible party</span> and{' '}\n                  <span className='text-info'>group</span>\n                </i>\n              }\n            />\n          </Col>\n          <Col sm={3} xs={6} className='pr-1'>\n            <CSVLink\n              data={generalList.map(\n                ({\n                  first_name,\n                  last_name,\n                  group,\n                  eligible_party,\n                  citizenshipCountry,\n                  residenceCountry,\n                  email,\n                  phone,\n                  dob,\n                  qualifications,\n                  work_histories,\n                  language_proficiencies,\n                  spouse,\n                  children,\n                  criminal_record,\n                  family_in_canada,\n                  job_offer,\n                  medical_condition,\n                  comment,\n                  createdAt,\n                }) => ({\n                  first_name,\n                  last_name,\n                  group,\n                  eligible_party,\n                  citizenshipCountry: citizenshipCountry.name,\n                  residenceCountry: residenceCountry.name,\n                  email,\n                  phone,\n                  dob,\n                  married: spouse !== null,\n                  qualifications: qualToString(qualifications),\n                  work_histories: experienceToString(work_histories),\n                  language_proficiencies: laguageToString(\n                    language_proficiencies\n                  ),\n                  spouse: spouse\n                    ? `${_calculateAge(spouse.dob)} years \\n| ${qualToString(\n                        spouse.qualifications\n                      )} \\n| ${experienceToString(\n                        spouse.work_histories\n                      )} \\n| ${laguageToString(\n                        spouse.language_proficiencies\n                      )}  `\n                    : 'NIL',\n                  children,\n                  criminal_record: criminal_record ? 'Yes' : 'No',\n                  family_in_canada: family_in_canada ? 'Yes' : 'No',\n                  job_offer: job_offer ? 'Yes' : 'No',\n                  medical_condition: medical_condition ? 'Yes' : 'No',\n                  comment,\n                  createdAt,\n                })\n              )}\n              target='_blank'\n              className='btn btn-primary btn-block'\n              filename='General-Immigrants'\n            >\n              Exp All\n            </CSVLink>\n          </Col>\n          <Col sm={3} xs={6} className='pl-1'>\n            <CSVLink\n              data={generalList.map(\n                ({ first_name, last_name, email, phone }) => ({\n                  first_name,\n                  last_name,\n                  email,\n                  phone,\n                })\n              )}\n              target='_blank'\n              className='btn btn-info btn-block'\n              filename='General-Immigrants(filtered)'\n            >\n              Exp Few\n            </CSVLink>\n          </Col>\n        </Row>\n\n        <Row className='mt-3'>\n          <Col sm='12'>\n            <h4>Filter By:</h4>\n          </Col>\n          <Col xs='3' className='pr-1'>\n            <DateInputGroup\n              inputProps={{\n                style: { type: 'date', border: '1px solid #cad1d7' },\n                required: true,\n                placeholder: 'from',\n                class: 'form-control-sm form-control filter-input',\n              }}\n              label='Created'\n              onFocus={this.disableKeyboard}\n              onBlur={this.enableKeyboard}\n              value={startDate}\n              autoComplete='off'\n              name='startDate'\n              id='startDate'\n              onChange={(e) =>\n                this.onChange({\n                  ...e,\n                  target: { ...e.target, name: 'startDate' },\n                })\n              }\n            />\n          </Col>\n          <Col xs='3' className='pl-1'>\n            <DateInputGroup\n              inputProps={{\n                style: { type: 'date', border: '1px solid #cad1d7' },\n                required: true,\n                placeholder: 'to',\n                class: 'form-control-sm form-control filter-input',\n              }}\n              label='-'\n              onFocus={this.disableKeyboard}\n              onBlur={this.enableKeyboard}\n              value={endDate}\n              autoComplete='off'\n              name='endDate'\n              id='endDate'\n              onChange={(e) =>\n                this.onChange({\n                  ...e,\n                  target: { ...e.target, name: 'endDate' },\n                })\n              }\n            />\n          </Col>\n        </Row>\n        <Card className='p-0 resp mt-3'>\n          <Table responsive striped bordered>\n            <thead>\n              <tr>\n                {data.titles.map(({ title, field }, key) =>\n                  isClients && field === 'client_status' ? (\n                    ''\n                  ) : (\n                    <th className='text-capitalize' key={key}>\n                      {title}{' '}\n                      <button\n                        className='d-inline btn btn-link px-0'\n                        onClick={() => this.sortData(field)}\n                      >\n                        <i\n                          className={`fa fa-angle-down mr-0 ${\n                            sortField === field && asc ? 'text-secondary' : ''\n                          }`}\n                        ></i>\n                        <i\n                          className={`fa fa-angle-up mr-0 ${\n                            sortField === field && !asc ? 'text-secondary' : ''\n                          }`}\n                        ></i>\n                      </button>\n                    </th>\n                  )\n                )}\n              </tr>\n            </thead>\n            <tbody>\n              {generalList.map((immigrant, key: any) => {\n                const {\n                  first_name,\n                  last_name,\n                  email,\n                  group,\n                  dob,\n                  eligible_party,\n                  phone,\n                  spouse,\n                  createdAt,\n                  residenceCountry,\n                  citizenshipCountry,\n                  qualifications,\n                  work_histories,\n                  language_proficiencies,\n                  client_status,\n                  children,\n                  criminal_record,\n                  family_in_canada,\n                  job_offer,\n                  medical_condition,\n                  comment,\n                  id,\n                } = immigrant\n                return (\n                  <tr key={key}>\n                    <th scope='row'>{key + 1}</th>\n                    {isClients ? (\n                      ''\n                    ) : (\n                      <td>\n                        <Button\n                          color={client_status ? 'secondary' : 'success'}\n                          onClick={() => this.updateImmigrant(id)}\n                          size='sm'\n                          disabled={client_status}\n                        >\n                          {client_status ? 'Converted' : 'Convert to Client'}\n                        </Button>\n                      </td>\n                    )}\n                    <td>{`${first_name} ${last_name}`}</td>\n                    <td>Group {group}</td>\n                    <td>{eligible_party}</td>\n                    <td>{citizenshipCountry.name}</td>\n                    <td>{residenceCountry.name}</td>\n                    <td>{email}</td>\n                    <td>{phone}</td>\n                    <td>{_calculateAge(dob)}</td>\n                    <td>{spouse !== null ? 'true' : 'false'}</td>\n                    <td>{qualToString(qualifications)}</td>\n                    <td>{experienceToString(work_histories)}</td>\n                    <td>{laguageToString(language_proficiencies)}</td>\n                    <td>\n                      {spouse ? (\n                        <>\n                          <strong>Age:</strong>{' '}\n                          {`${_calculateAge(spouse.dob)} years`}\n                          <br />\n                          <strong>Quals:</strong>{' '}\n                          {qualToString(spouse.qualifications)}\n                          <br />\n                          <strong>Exp's:</strong>{' '}\n                          {experienceToString(spouse.work_histories)}\n                          <br />\n                          <strong>Lang's:</strong>{' '}\n                          {laguageToString(spouse.language_proficiencies)}\n                        </>\n                      ) : (\n                        'NIL'\n                      )}\n                    </td>\n                    <td>{children}</td>\n                    <td>{criminal_record ? 'Yes' : 'No'}</td>\n                    <td>{family_in_canada ? 'Yes' : 'No'}</td>\n                    <td>{job_offer ? 'Yes' : 'No'}</td>\n                    <td>{medical_condition ? 'Yes' : 'No'}</td>\n                    <td>{comment}</td>\n                    <td>{moment(createdAt).format('L | HH:mm')}</td>\n                  </tr>\n                )\n              })}\n            </tbody>\n          </Table>\n          {!generalList.length && (\n            <div className='text-center'>\n              <strong>No result found</strong>\n            </div>\n          )}\n        </Card>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = ({ generalList }: { generalList: [] }) => ({\n  ...generalList,\n})\n\nexport default connect(mapStateToProps, {\n  getGeneralImmigrants,\n  searchDb,\n  updateImmigrant,\n})(\n  //@ts-ignore\n  withRouter(General)\n)\n","import { AxiosPromise } from 'axios'\nimport moment from 'moment'\nimport React, { Component } from 'react'\nimport { CSVLink } from 'react-csv'\nimport NumberFormat from 'react-number-format'\nimport { connect } from 'react-redux'\nimport { Card, Col, Row, Table } from 'reactstrap'\nimport {\n  collectionType,\n  getImmigrants,\n  searchDb,\n} from '../actions/ImmigrantActions'\nimport { TextInputGroup } from '../components/Form'\nimport Loading from '../components/Loading'\nimport { antiguaType } from '../interface/antiguaType'\n\nconst data = {\n  titles: [\n    '',\n    'Name',\n    'email',\n    'phone',\n    'married',\n    'invest funds',\n    'networth',\n    'residence',\n    'nationality',\n    'rejected',\n    'deported',\n    'O dep',\n    'Y dep',\n    'T dep',\n    'A dep',\n    'contact med',\n    'ref',\n    'time',\n  ],\n}\n\nclass Stkitts extends Component<{\n  getImmigrants: (collection: collectionType) => AxiosPromise\n  searchDb: (collection: collectionType, searchParam: string) => AxiosPromise\n  immigrantList: antiguaType[]\n}> {\n  state = { search: '', loading: false }\n\n  async componentDidMount() {\n    this.setState({ loading: true })\n    await this.props\n      .getImmigrants('stkitts')\n      .then((res) => this.setState({ loading: false }))\n      .catch((err) => this.setState({ loading: false }))\n  }\n  onChange = (e?: any) => {\n    this.setState({ [e.target.name]: e.target.value })\n    this.onSearch(e.target.value)\n  }\n\n  onSearch = (param: string) =>\n    this.setState({ loading: true }, () =>\n      this.props\n        .searchDb('stkitts', param)\n        .then((res) => this.setState({ loading: false }))\n        .catch((err) => this.setState({ loading: false }))\n    )\n\n  render() {\n    const { immigrantList } = this.props\n    return (\n      <div id='requests' className='px-0 w-100 mx-auto'>\n        <Loading show={this.state.loading} />\n        <Row>\n          <Col>\n            <h2>St. Kitts</h2>\n          </Col>\n        </Row>\n        <Row>\n          <Col sm={8}>\n            <TextInputGroup\n              onChange={(e: any) => this.onChange(e)}\n              name={'search'}\n              value={this.state.search}\n              placeholder='Search...'\n            />\n          </Col>\n          <Col sm={4}>\n            <CSVLink\n              data={immigrantList.map(\n                ({\n                  first_name,\n                  last_name,\n                  email,\n                  phone,\n                  married,\n                  old_dependents,\n                  young_dependents,\n                  teen_dependents,\n                  average_dependents,\n                  rejected,\n                  deported,\n                  contact_medium,\n                  referee,\n                  createdAt,\n                  investRange,\n                  networthRange,\n                  residenceCountry,\n                  nationalityCountry,\n                  RejectedCountries,\n                  DeportedCountries,\n                }) => ({\n                  first_name,\n                  last_name,\n                  email,\n                  phone,\n                  married,\n                  old_dependents,\n                  young_dependents,\n                  teen_dependents,\n                  average_dependents,\n                  contact_medium,\n                  referee,\n                  createdAt,\n                  invest: `${investRange.min}-${investRange.max}`,\n                  networth: `${networthRange.min}-${networthRange.max}`,\n                  residenceCountry: residenceCountry.name,\n                  nationalityCountry: nationalityCountry.name,\n                  RejectedCountries,\n                  DeportedCountries,\n                  rejected: rejected\n                    ? RejectedCountries.map((country) => (\n                        <span className='' key={country.id}>\n                          {country.name},{' '}\n                        </span>\n                      ))\n                    : 'No',\n                  deported: deported\n                    ? DeportedCountries.map((country) => (\n                        <span className='' key={country.id}>\n                          {country.name},{' '}\n                        </span>\n                      ))\n                    : 'No',\n                })\n              )}\n              target='_blank'\n              className='btn btn-primary btn-block'\n              filename='Stkitts-Immigrants'\n            >\n              Export to CSV\n            </CSVLink>\n          </Col>\n        </Row>\n        <Card className='p-0 resp'>\n          <Table responsive striped bordered>\n            <thead>\n              <tr>\n                {data.titles.map((title, key) => (\n                  <th className='text-capitalize' key={key}>\n                    {title}\n                  </th>\n                ))}\n              </tr>\n            </thead>\n            <tbody>\n              {immigrantList.map((immigrant, key: any) => {\n                const {\n                  first_name,\n                  last_name,\n                  email,\n                  phone,\n                  married,\n                  old_dependents,\n                  young_dependents,\n                  teen_dependents,\n                  average_dependents,\n                  rejected,\n                  deported,\n                  contact_medium,\n                  referee,\n                  createdAt,\n                  investRange,\n                  networthRange,\n                  residenceCountry,\n                  nationalityCountry,\n                  RejectedCountries,\n                  DeportedCountries,\n                } = immigrant\n                return (\n                  <tr key={key}>\n                    <th scope='row'>{key + 1}</th>\n                    <td>{`${first_name} ${last_name}`}</td>\n                    <td>{email}</td>\n                    <td>{phone}</td>\n                    <td>{married}</td>\n                    <td>\n                      <NumberFormat\n                        thousandSeparator\n                        prefix='$'\n                        value={investRange.min}\n                        displayType='text'\n                      />\n                      {' - '}\n                      <NumberFormat\n                        thousandSeparator\n                        prefix='$'\n                        value={investRange.max}\n                        displayType='text'\n                      />\n                    </td>\n                    <td>\n                      <NumberFormat\n                        thousandSeparator\n                        prefix='$'\n                        value={networthRange.min}\n                        displayType='text'\n                      />\n                      {' - '}\n                      <NumberFormat\n                        thousandSeparator\n                        prefix='$'\n                        value={networthRange.max}\n                        displayType='text'\n                      />\n                    </td>\n                    <td>{residenceCountry.name}</td>\n                    <td>{nationalityCountry.name}</td>\n                    <td>\n                      {rejected\n                        ? RejectedCountries.map((country) => (\n                            <span className='' key={country.id}>\n                              {country.name},{' '}\n                            </span>\n                          ))\n                        : 'No'}\n                    </td>\n                    <td>\n                      {deported\n                        ? DeportedCountries.map((country) => (\n                            <span className='' key={country.id}>\n                              {country.name},{' '}\n                            </span>\n                          ))\n                        : 'No'}\n                    </td>\n                    <td>{old_dependents}</td>\n                    <td>{young_dependents}</td>\n                    <td>{teen_dependents}</td>\n                    <td>{average_dependents}</td>\n                    <td>{contact_medium}</td>\n                    <td>{referee}</td>\n                    <td>{moment(createdAt).format('L | HH:mm')}</td>\n                  </tr>\n                )\n              })}\n            </tbody>\n          </Table>\n          {!immigrantList.length && (\n            <div className='text-center'>\n              <strong>No result found</strong>\n            </div>\n          )}\n        </Card>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = ({ immigrantList }: { immigrantList: [] }) => ({\n  ...immigrantList,\n})\n\n//@ts-ignore\nexport default connect(mapStateToProps, { getImmigrants, searchDb })(Stkitts)\n","import Antigua from './pages/Antigua'\nimport Business from './pages/Business'\nimport General from './pages/General'\nimport Stkitts from './pages/Stkitts'\n\nvar routes = [\n  {\n    path: `${process.env.PUBLIC_URL}/antigua`,\n    name: 'All Antigua',\n    component: Antigua,\n  },\n  {\n    path: `${process.env.PUBLIC_URL}/stkitts`,\n    name: 'All St. Kitts',\n    component: Stkitts,\n  },\n  {\n    path: `${process.env.PUBLIC_URL}/businesses`,\n    name: 'All Business Immigrants',\n    component: Business,\n  },\n  {\n    path: `${process.env.PUBLIC_URL}/business/:id`,\n    name: 'All Business',\n    component: Business,\n  },\n  // {\n  //   path: `${process.env.PUBLIC_URL}/business/leads`,\n  //   name: 'All Business Leads',\n  //   component: Business,\n  // },\n  {\n    path: `${process.env.PUBLIC_URL}/generals`,\n    name: 'All General Immigrants',\n    component: General,\n  },\n  {\n    path: `${process.env.PUBLIC_URL}/general/:id`,\n    name: 'All General',\n    component: General,\n  },\n  // {\n  //   path: `${process.env.PUBLIC_URL}/general/leads`,\n  //   name: 'All General Leads',\n  //   component: General,\n  // },\n\n  {\n    path: `${process.env.PUBLIC_URL}/`,\n    name: 'All Business Leads',\n    component: Business,\n  },\n]\n\nexport default routes\n","import Axios from 'axios'\nimport { URL } from '../config'\n\n// Get Countries\nexport const getCountries = async () =>\n  await Axios.get(`${URL}/utilities/countries`)\n\n// Get Fund Ranges\nexport const getFundRanges = async (type: string) =>\n  await Axios.get(`${URL}/utilities/funds/${type}`)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { Link, Redirect, Route, Switch, NavLink } from 'react-router-dom'\nimport { Card, Col, Row, Button, Collapse } from 'reactstrap'\nimport { showcaseBg, avatar1, logo } from '../assets/img'\nimport Loading from '../components/Loading'\nimport Section from '../components/Section'\nimport './style.scss'\nimport routes from '../routes'\nimport { logOut } from '../actions'\nimport userType, { authState } from '../interface/user'\nimport { getCountries, getFundRanges } from '../actions/Utilites'\nimport { toast } from 'react-toastify'\nimport { errHandler } from '../actions/errorHandler'\nimport { fundsAction } from '../helpers'\n\nclass AdminLayout extends Component<{\n  user: userType | null\n  logOut: () => void\n}> {\n  state = {\n    showMenu: false,\n    loading: false,\n    countries: [],\n    investRanges: [],\n    isOpen: '',\n  }\n\n  componentDidMount() {\n    this.initFunc()\n  }\n\n  initFunc = async () => {\n    this.setState({ loading: true })\n    try {\n      const res1 = await getCountries()\n      // const res2 = await getFundRanges('worth')\n      const res3 = await getFundRanges('invest')\n\n      this.setState({\n        loading: false,\n        countries: res1.data,\n        investRanges: res3.data,\n      })\n    } catch (err) {\n      this.setState({ loading: false })\n      errHandler(err?.response?.data, toast)\n    }\n  }\n\n  toggleMenu = () => this.setState({ showMenu: !this.state.showMenu })\n\n  toggleMenuChildren = (menu: string = '') => this.setState({ isOpen: menu })\n\n  getRoutes = (\n    routes: {\n      path: string\n      name: string\n      component: React.ComponentClass<{\n        countries: any\n        investRanges: any\n        title: string\n      }>\n    }[]\n  ) => {\n    const { investRanges, countries } = this.state\n    return routes.map((prop, key) => (\n      <Route\n        path={prop.path}\n        component={() => (\n          <prop.component\n            countries={countries.map(\n              (country: { name: string; id: number }) => ({\n                name: country.name,\n                value: country.id,\n              })\n            )}\n            investRanges={fundsAction(investRanges)}\n            title={prop.name}\n          />\n        )}\n        key={key}\n      />\n    ))\n  }\n\n  render() {\n    const { user } = this.props,\n      { showMenu, isOpen } = this.state\n\n    return user ? (\n      <Section\n        bgImage\n        bgImageSrc={showcaseBg}\n        id='showcase'\n        className='default-padding'\n      >\n        <div className='container' id='Dashboard'>\n          <div>\n            <Card className='p-3 bg-faded flex-md-row justify-content-between'>\n              <h2 className='text-center'>\n                <i\n                  className='fa fa-bars d-md-none float-left'\n                  onClick={() => this.toggleMenu()}\n                ></i>\n                <span className=' float-md-none float-right'>Dashboard</span>\n              </h2>\n              <div className='text-center'>\n                <Link to={`${process.env.PUBLIC_URL}`}>\n                  <img src={`${logo}`} alt='Loft' height={60} />\n                </Link>\n              </div>\n            </Card>\n          </div>\n          <Row className='row-eq-height'>\n            <Col\n              className={`mt-md-3 pr-0 menu ${\n                showMenu ? ' show ' : ''\n              }d-md-block`}\n              sm='12'\n              md='3'\n              onClick={(e: any) => {\n                if (e.target.classList.contains('menu')) this.toggleMenu()\n              }}\n            >\n              <Card className='bg-faded p-4 h-100'>\n                <h2 className='text-right'>\n                  <i\n                    onClick={() => this.setState({ showMenu: false })}\n                    className='d-md-none fa fa-times'\n                  ></i>\n                </h2>\n                <div className='text-center mt-4'>\n                  <img\n                    alt='...'\n                    className='rounded-circle w-50'\n                    src={`${avatar1}`}\n                  />\n                  <br />\n                  <strong>{`${user.email}`}</strong>\n                  <br />\n\n                  <div className='h5 font-weight-300'>{user.email}</div>\n                </div>\n                <div id='menu' className='mt-4'>\n                  <p className='mb-1'>\n                    <Link\n                      onClick={() => this.toggleMenuChildren('business')}\n                      to={`${process.env.PUBLIC_URL}/business/leads`}\n                    >\n                      <i\n                        className={`fa fa-angle-${\n                          isOpen === 'business' ? 'down' : 'right'\n                        }`}\n                      ></i>{' '}\n                      Business Immigrants\n                    </Link>\n                    <Collapse isOpen={isOpen === 'business'} className='pl-4'>\n                      <p className='mb-1'>\n                        <NavLink\n                          activeClassName='active'\n                          onClick={this.toggleMenu}\n                          to={`${process.env.PUBLIC_URL}/business/leads`}\n                        >\n                          Business Leads\n                        </NavLink>\n                      </p>\n                      <p className='mb-1'>\n                        <NavLink\n                          activeClassName='active'\n                          onClick={this.toggleMenu}\n                          to={`${process.env.PUBLIC_URL}/business/clients`}\n                        >\n                          Business Clients\n                        </NavLink>\n                      </p>\n                    </Collapse>\n                  </p>\n                  <hr className='mt-0 mb-3' />\n                  <p className='mb-1'>\n                    <Link\n                      onClick={() => this.toggleMenuChildren('general')}\n                      to={`${process.env.PUBLIC_URL}/general/leads`}\n                    >\n                      <i\n                        className={`fa fa-angle-${\n                          isOpen === 'general' ? 'down' : 'right'\n                        }`}\n                      ></i>{' '}\n                      General Immigrants\n                    </Link>\n                    <Collapse isOpen={isOpen === 'general'} className='pl-4'>\n                      <p className='mb-1'>\n                        <NavLink\n                          activeClassName='active'\n                          onClick={this.toggleMenu}\n                          to={`${process.env.PUBLIC_URL}/general/leads`}\n                        >\n                          General Leads\n                        </NavLink>\n                      </p>\n                      <p className='mb-1'>\n                        <NavLink\n                          activeClassName='active'\n                          onClick={this.toggleMenu}\n                          to={`${process.env.PUBLIC_URL}/general/clients`}\n                        >\n                          General Clients\n                        </NavLink>\n                      </p>\n                    </Collapse>\n                  </p>\n                  <hr className='mt-0 mb-3' />\n                  <p className='mb-1'>\n                    <NavLink\n                      activeClassName='active'\n                      onClick={this.toggleMenu}\n                      to={`${process.env.PUBLIC_URL}/antigua`}\n                    >\n                      Antigua Immigrants\n                    </NavLink>\n                  </p>\n                  <hr className='mt-0 mb-3' />\n                  <p className='mb-1'>\n                    <NavLink\n                      activeClassName='active'\n                      onClick={this.toggleMenu}\n                      to={`${process.env.PUBLIC_URL}/stkitts`}\n                    >\n                      St. Kitts Immigrants\n                    </NavLink>\n                  </p>\n                  <hr className='mt-0 mb-3' />\n\n                  <Button block onClick={this.props.logOut} color='danger'>\n                    Logout\n                  </Button>\n                </div>\n              </Card>\n            </Col>\n            <Col className='mt-3' md='9'>\n              <Card className='bg-faded p-sm-4 p-2 h-100'>\n                <Loading show={this.state.loading} />\n                {\n                  //@ts-ignore\n                  <Switch>{this.getRoutes(routes)}</Switch>\n                }\n              </Card>\n            </Col>\n          </Row>\n        </div>\n      </Section>\n    ) : (\n      <Redirect to={`${process.env.PUBLIC_URL}/auth/login`} />\n    )\n  }\n}\nconst mapStateToProps = ({ auth }: { auth: authState }) => ({\n  ...auth,\n})\n\nexport default connect(mapStateToProps, { logOut })(AdminLayout)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { Button, Col, Container, Row, Form } from 'reactstrap'\nimport { authenticateUser } from '../actions'\nimport { TextInputGroup } from '../components/Form'\nimport Loading from '../components/Loading'\nimport AdminLayout from '../layouts/AdminLayout'\nimport { logo } from '../assets/img'\nimport { authState } from '../interface/user'\n\nconst initialState = {\n  email: '',\n  password: '',\n  prevPath: '/',\n  loading: false,\n}\n\nclass Auth extends Component<authState> {\n  state = initialState\n\n  onChange = (e?: any) => {\n    this.setState({ [e.target.name]: e.target.value })\n  }\n\n  loginUser = (e: any) => {\n    e.preventDefault()\n    this.setState({ loading: true })\n    this.props.authenticateUser(this.state, (res: any, err: any) =>\n      res ? this.setState(initialState) : this.setState(err)\n    )\n  }\n\n  render() {\n    return this.props.isAuthenticated ? (\n      //@ts-ignore\n      <AdminLayout />\n    ) : (\n      <>\n        <Container id='Quote' className='mt-5 pt-5'>\n          <Row className='mb-4'>\n            <Col className='text-center'>\n              <img src={logo} style={{ maxHeight: '5rem' }} alt='Logo' />\n            </Col>\n          </Row>\n          <Form onSubmit={this.loginUser.bind(this)}>\n            <Row>\n              <Loading show={this.state.loading} />\n              <Col sm='6' lg={4} className='offset-sm-3 offset-lg-4 py-2'>\n                <TextInputGroup\n                  onChange={(e: any) => this.onChange(e)}\n                  name={'email'}\n                  value={this.state.email}\n                  isRequired\n                  placeholder='Username'\n                  iconClass='ni ni-email-83'\n                  autoFocus={true}\n                  className='mb-1'\n                />\n\n                <TextInputGroup\n                  onChange={(e: any) => this.onChange(e)}\n                  name={'password'}\n                  type='password'\n                  value={this.state.password}\n                  isRequired\n                  isPassword\n                  placeholder='Password'\n                  iconClass='ni ni-lock-circle-open'\n                />\n                <div className='text-center'>\n                  <Button\n                    block\n                    className='mt-4 mb-2'\n                    color='primary'\n                    type='submit'\n                  >\n                    Login\n                  </Button>\n                </div>\n              </Col>\n            </Row>\n          </Form>\n        </Container>\n      </>\n    )\n  }\n}\n\nconst mapStateToProps = ({ auth }: { auth: any }) => ({\n  ...auth,\n})\n\nexport default connect(mapStateToProps, { authenticateUser })(Auth)\n","import { LOGOUT_USER, AUTH_SUCCESS } from '../actions/types'\nimport { setLocal } from '../helpers'\n\nconst authReducer = (state = {}, action: { type: string; payload: any }) => {\n  switch (action.type) {\n    case AUTH_SUCCESS:\n      const { token } = action.payload\n      delete action.payload.token\n      setLocal('token', token)\n      setLocal('user', action.payload)\n      return {\n        ...state,\n        authLoaded: true,\n        token,\n        user: action.payload,\n        isAuthenticated: true,\n        goBack: true,\n      }\n\n    case LOGOUT_USER:\n      return {\n        ...state,\n        authLoaded: true,\n        isAuthenticated: false,\n        user: null,\n        token: '',\n      }\n\n    default:\n      return state\n  }\n}\n\nexport default authReducer\n","import { combineReducers } from 'redux'\nimport { default as auth } from './AuthReducers'\nimport {\n  immigrantDeleteReducer as immigrantDelete,\n  immigrantListReducer as immigrantList,\n  businessListReducer as businessList,\n  generalListReducer as generalList,\n} from './ImmigrantReducers'\n\nexport default combineReducers({\n  auth,\n  immigrantDelete,\n  immigrantList,\n  businessList,\n  generalList,\n})\n","import {\n  IMMIGRANT_DELETE_FAILED,\n  IMMIGRANT_DELETE_REQUEST,\n  IMMIGRANT_DELETE_SUCCESS,\n  IMMIGRANT_LIST_FAILED,\n  IMMIGRANT_LIST_REQUEST,\n  IMMIGRANT_LIST_SUCCESS,\n  BUSINESS_LIST_FAILED,\n  BUSINESS_LIST_REQUEST,\n  BUSINESS_LIST_SUCCESS,\n  GENERAL_LIST_FAILED,\n  GENERAL_LIST_REQUEST,\n  GENERAL_LIST_SUCCESS,\n  IMMIGRANT_LIST_RESET,\n  UPDATE_IMMIGRANT_REQUEST,\n  UPDATE_GENERAL_SUCCESS,\n  UPDATE_IMMIGRANT_FAILED,\n  UPDATE_BUSINESS_SUCCESS,\n} from '../constants/immigrantsConstants'\nimport { businessType } from '../interface/businessType'\nimport { generalType } from '../interface/generalType'\n\nexport const immigrantDeleteReducer = (\n  state = {},\n  { type, payload = null }: { type: string; payload: any }\n) => {\n  switch (type) {\n    case IMMIGRANT_DELETE_REQUEST:\n      return { loading: true }\n    case IMMIGRANT_DELETE_SUCCESS:\n      return { loading: false, success: true }\n    case IMMIGRANT_DELETE_FAILED:\n      return { loading: true, error: payload }\n    default:\n      return state\n  }\n}\n\nexport const immigrantListReducer = (\n  state = { immigrantList: [] },\n  { type, payload = null }: { type: string; payload: any }\n) => {\n  switch (type) {\n    case IMMIGRANT_LIST_REQUEST:\n      return { ...state, loading: true }\n    case IMMIGRANT_LIST_SUCCESS:\n      return { ...state, loading: false, immigrantList: payload }\n    case IMMIGRANT_LIST_FAILED:\n      return { ...state, loading: false, error: payload }\n    case IMMIGRANT_LIST_RESET:\n      return { immigrantList: [] }\n    case UPDATE_IMMIGRANT_REQUEST:\n      return { ...state, loading: true }\n    case UPDATE_IMMIGRANT_FAILED:\n      return { ...state, loading: false, error: payload }\n    default:\n      return state\n  }\n}\n\nexport const businessListReducer = (\n  state: { businessList: businessType[] } = { businessList: [] },\n  { type, payload = null }: { type: string; payload: any }\n) => {\n  switch (type) {\n    case BUSINESS_LIST_REQUEST:\n      return { ...state, loading: true }\n    case BUSINESS_LIST_SUCCESS:\n      return { ...state, loading: false, businessList: payload }\n    case BUSINESS_LIST_FAILED:\n      return { ...state, loading: false, error: payload }\n    case UPDATE_BUSINESS_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        businessList: state.businessList.filter((imi) => imi.id !== payload.id),\n      }\n    default:\n      return state\n  }\n}\n\nexport const generalListReducer = (\n  state: { generalList: generalType[] } = { generalList: [] },\n  { type, payload = null }: { type: string; payload: any }\n) => {\n  switch (type) {\n    case GENERAL_LIST_REQUEST:\n      return { ...state, loading: true }\n    case GENERAL_LIST_SUCCESS:\n      return { ...state, loading: false, generalList: payload }\n    case GENERAL_LIST_FAILED:\n      return { ...state, loading: false, error: payload }\n    case UPDATE_GENERAL_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        generalList: state.generalList.filter((imi) => imi.id !== payload.id),\n      }\n    default:\n      return state\n  }\n}\n","import { applyMiddleware, createStore } from 'redux'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport thunk from 'redux-thunk'\nimport { getLocal } from './helpers'\nimport reducers from './reducers'\n\nconst auth = {\n  isAuthenticated: getLocal('token', false),\n  user: getLocal('user'),\n  token: getLocal('token', false),\n}\n\nconst initialState = {\n  auth,\n}\n\nconst middleware = [thunk]\n\nconst store = createStore(\n  reducers,\n  initialState,\n  composeWithDevTools(applyMiddleware(...middleware))\n)\n\nexport default store\n","import React, { Component } from \"react\";\nimport { Provider } from \"react-redux\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { ToastContainer } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport Auth from \"./pages/Auth\";\nimport store from \"./store\";\n\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <BrowserRouter>\n          <ToastContainer\n            autoClose={8000}\n            draggable\n            enableMultiContainer\n            containerId={\"A\"}\n            position={\"top-right\"}\n          />\n          <ToastContainer\n            autoClose={8000}\n            draggable\n            enableMultiContainer\n            containerId={\"B\"}\n            position={\"bottom-left\"}\n          />\n          <ToastContainer autoClose={8000} draggable />\n          {\n            //@ts-ignore\n            <Auth />\n          }\n        </BrowserRouter>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./assets/vendor/@fortawesome/fontawesome-free/css/all.min.css\";\nimport \"./assets/vendor/nucleo/css/nucleo.css\";\nimport \"./index.scss\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}